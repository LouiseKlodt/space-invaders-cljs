["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quiltools.core","~:imports",null,"~:requires",["^ ","~$q","~$quil.core","^9","^9","~$m","~$quil.middleware","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$stroke-weight",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^G",[[]]]]],"~:doc","gets the stroke weight of the current graphics context"],"^5","~$quiltools.core/stroke-weight","^A","resources/public/js/development/quiltools/core.cljc","^E",20,"~:method-params",["^G",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"~:variadic?",false,"^B",7,"~:ret-tag","~$any","^D",7,"~:max-fixed-arity",0,"~:fn-var",true,"^F",["^G",["^H",["^G",[[]]]]],"^I","gets the stroke weight of the current graphics context"],"~$spin",["^ ","^?",null,"^@",["^ ","^A","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","^B",13,"^C",7,"^D",13,"^E",11,"^F",["^G",["^H",["^G",[["~$theta","~$p"]]]]],"^I","returns a draw-fn which draws `p` at angle `theta`"],"^5","~$quiltools.core/spin","^A","resources/public/js/development/quiltools/core.cljc","^E",11,"^K",["^G",[["^T","~$p"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",13,"^O","~$function","^D",13,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^T","~$p"]]]]],"^I","returns a draw-fn which draws `p` at angle `theta`"],"~$at",["^ ","^?",null,"^@",["^ ","^A","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","^B",19,"^C",7,"^D",19,"^E",9,"^F",["^G",["^H",["^G",[["~$x","~$y","~$p"]]]]],"^I","returns a draw-fn which draws `p` at origin `[x y]`"],"^5","~$quiltools.core/at","^A","resources/public/js/development/quiltools/core.cljc","^E",9,"^K",["^G",[["~$x","~$y","~$p"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",19,"^O","^V","^D",19,"^Q",3,"^R",true,"^F",["^G",["^H",["^G",[["~$x","~$y","~$p"]]]]],"^I","returns a draw-fn which draws `p` at origin `[x y]`"],"~$in",["^ ","^?",null,"^@",["^ ","^A","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","^B",25,"^C",7,"^D",25,"^E",9,"^F",["^G",["^H",["^G",[["~$w","~$h","~$p"]]]]],"^I","returns a draw-fn which draws `p` in a box of size `[w h]`"],"^5","~$quiltools.core/in","^A","resources/public/js/development/quiltools/core.cljc","^E",9,"^K",["^G",[["~$w","~$h","~$p"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",25,"^O","^V","^D",25,"^Q",3,"^R",true,"^F",["^G",["^H",["^G",[["~$w","~$h","~$p"]]]]],"^I","returns a draw-fn which draws `p` in a box of size `[w h]`"],"~$divides?",["^ ","^?",null,"^@",["^ ","^A","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","^B",37,"^C",7,"^D",37,"^E",15,"^F",["^G",["^H",["^G",[["~$n","~$d"]]]]],"^I","returns `true` if `d` divides `n`"],"^5","~$quiltools.core/divides?","^A","resources/public/js/development/quiltools/core.cljc","^E",15,"^K",["^G",[["~$n","~$d"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",37,"^O","~$boolean","^D",37,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["~$n","~$d"]]]]],"^I","returns `true` if `d` divides `n`"],"~$n-ticks?",["^ ","^?",null,"^@",["^ ","^A","/Users/louiseklodt/dev/clojure/practice/quil/space-wars/resources/public/js/development/quiltools/core.cljc","^B",42,"^C",7,"^D",42,"^E",15,"^F",["^G",["^H",["^G",[["~$n"]]]]],"^I","returns true only every `n` ticks"],"^5","~$quiltools.core/n-ticks?","^A","resources/public/js/development/quiltools/core.cljc","^E",15,"^K",["^G",[["~$n"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",42,"^O","^11","^D",42,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["~$n"]]]]],"^I","returns true only every `n` ticks"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^I",null]