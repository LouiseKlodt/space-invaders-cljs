["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^V",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",11,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",181,"~:ret-tag","~$any","^S",181,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns the spec as data"],"~$->t_cljs$spec$alpha27518",["^ ","^N",null,"^O",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^1;","^1="]],"~:factory","~:positional","^U",["^V",["^W",["^V",[["^X","~$meta27519"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27518.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27518","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^X","^1A"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1391,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha27518","^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1A"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27518."],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1407,"^R",19,"^S",1407,"^T",31,"~:skip-wiki",true,"^U",["^V",["^W",["^V",[["^M","~$pred","~$gfn"]]]]],"^Y","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^M","^1F","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1407,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha27521","^S",1407,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G"]]]]],"^Y","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",21,"^R",16,"^S",21,"^T",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",33,"^R",1,"^1K",true,"^Q",21,"^S",21,"~:tag","~$number","^Y","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",35,"^R",16,"^S",35,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",35,"^S",35,"^1M","^1N","^Y","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",841,"^R",16,"^S",841,"^T",26,"~:private",true],"^1R",true,"^=","~$cljs.spec.alpha/empty-coll","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",26,"^R",1,"^Q",841,"^S",841,"^1M","~$cljs.core/IMap"],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",235,"^R",7,"^S",235,"^T",22,"^U",["^V",["^W",["^V",[["~$ed"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",22,"^[",["^V",[["^1V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13","~$clj-nil","^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1V"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1159,"^R",8,"^S",1159,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^M","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-explain","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^M","~$p","^1Z","^1[","^20","^21"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1159,"^13",["^6",["~$cljs.core/IVector","^14","^1X"]],"^S",1159,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p","^1Z","^1[","^20","^21"]]]]]],"~$Specize",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",131,"^R",14,"^S",131,"^T",21,"~:protocol-symbol",true,"~:jsdoc",["^V",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^M"]]]]],"^25",true,"^=","^1<","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",21,"^R",1,"^Q",131,"^27",["^ ","^28",["^ ","^29",[["~$_"],["~$_","^M"]]]],"~:info",null,"^S",131,"^1M","^14","~:impls",["^6",["~$cljs.spec.alpha/t_cljs$spec$alpha27219","~$cljs.spec.alpha/t_cljs$spec$alpha27486","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha27205","~$cljs.spec.alpha/t_cljs$spec$alpha27493","~$cljs.spec.alpha/t_cljs$spec$alpha27194","~$cljs.spec.alpha/t_cljs$spec$alpha27138","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha27312","^1C","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha27286","~$cljs.core/PersistentTreeSet","^1I","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha27228","~$cljs.spec.alpha/t_cljs$spec$alpha27300"]],"^26",["^V",["@interface"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1044,"^R",19,"^S",1044,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["~$ks","~$ps","~$forms"]]]]],"^Y","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2L","^2M","^2N"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1044,"^13",["^6",["~$clj","^14"]],"^S",1044,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2L","^2M","^2N"]]]]],"^Y","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",656,"^R",8,"^S",656,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["~$tag","~$ret"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/tagged-ret","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2R","^2S"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",656,"^13","~$cljs.core/MapEntry","^S",656,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2R","^2S"]]]]]],"~$->t_cljs$spec$alpha27219",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^2N","~$preds","^1G","~$specs","~$cnt","~$meta27220"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27219.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27219","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^2N","^2W","^1G","^2X","^2Y","^2Z"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",600,"^13","^2<","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G","^2X","^2Y","^2Z"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27219."],"~$t_cljs$spec$alpha27493",["^ ","~:num-fields",9,"^19",["^6",["^1:","^1;","^1<","^1=","~$cljs.core/ILookup"]],"^=","^2@","^P","resources/public/js/development/cljs/spec/alpha.cljs","~:type",true,"^18",true,"^R",5,"^Q",1343,"~:record",false,"^1M","~$function","^1>",["^6",["^1;","^1=","^32"]]],"~$t_cljs$spec$alpha27300",["^ ","^31",4,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2J","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",3,"^Q",816,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^1R",true,"^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"~:top-fn",["^ ","^12",false,"~:fixed-arity",3,"^15",3,"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",380,"^S",380,"^U",["^V",["^W",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]]]],"^Y","internal helper function that returns true when x is valid for spec."],"^1R",true,"^=","~$cljs.spec.alpha/pvalid?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^10",null,"^39",3,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",2,"^12",false,"^1M","~$boolean"],["^ ","^39",3,"^12",false,"^1M","^3;"]],"^Q",380,"^S",380,"^15",3,"^16",true,"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^Y","internal helper function that returns true when x is valid for spec."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",306,"^R",19,"^S",306,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["~$k","^M","^X"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",306,"^S",306,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"~$t_cljs$spec$alpha27521",["^ ","^31",5,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^1I","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",5,"^Q",1411,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^Q",262,"^R",1,"^S",262,"^T",29,"^1K",true,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",262,"^R",16,"^S",262,"^T",29,"^1K",true]],"~$*runtime-asserts*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1479,"^R",3,"^S",1479,"^T",20,"^1R",true,"^1K",true],"^1R",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1K",true,"^Q",1477,"^S",1479,"^1M","^3;"],"~$->t_cljs$spec$alpha27194",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","^1F","^1G","~$cpred?","~$unc","~$meta27195"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27194.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27194","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^M","^1F","^1G","^3D","^3E","^3F"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",520,"^13","^2A","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^3D","^3E","^3F"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27194."],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1291,"^R",19,"^S",1291,"^T",34,"^1E",true,"^U",["^V",["^W",["^V",[["~$re","^1G"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^3I","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1291,"^13","^2=","^S",1291,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3I","^1G"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",813,"^R",19,"^S",813,"^T",34,"^1E",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^2N","^2W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",813,"^13","^2J","^S",813,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'merge'"],"~$->t_cljs$spec$alpha27493",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1=","^32"]],"^1>",["^6",["^1;","^1=","^32"]],"^1?","^1@","^U",["^V",["^W",["^V",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^1G","^2X","~$meta27494"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27493.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1=","^32"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27493","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^3N","^3O","^3P","^3Q","^3R","^3S","^1G","^2X","^3T"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1343,"^13","^2@","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^3N","^3O","^3P","^3Q","^3R","^3S","^1G","^2X","^3T"]]]]],"^1>",["^6",["^1;","^1=","^32"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27493."],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",219,"^R",7,"^S",219,"^T",20,"^U",["^V",["^W",["^V",[["^X","^1Z","^1[","^20","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X","^1Z","^1[","^20","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",219,"^13",["^6",["^1T","^1X"]],"^S",219,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1Z","^1[","^20","~$x"]]]]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1110,"^R",8,"^S",1110,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/add-ret","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p","~$r","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1110,"^13",["^6",[null,"^2P","^14"]],"^S",1110,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",738,"^R",8,"^S",738,"^T",25,"^1R",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1Z","^1[","^20","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/explain-pred-list","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["^2N","^2W","^1Z","^1[","^20","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",738,"^13",["^6",["^23","^14","^1X"]],"^S",738,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1Z","^1[","^20","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",19,"^R",14,"^S",19,"^T",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",21,"~:const-expr",["^ ","~:op","^41","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1M","^1N"],"^R",1,"^41",true,"^Q",19,"^S",19,"^1M","^1N"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1487,"^R",7,"^S",1487,"^T",20,"^U",["^V",["^W",["^V",[["~$flag"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4;"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1487,"^S",1487,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4;"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1042,"^R",8,"^S",1042,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$p1","~$p2"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/alt2","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^4>","^4?"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1042,"^13",["^6",[null,"^14","^1T","^1X"]],"^S",1042,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4>","^4?"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",417,"^R",8,"^S",417,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"^1R",true,"^=","~$cljs.spec.alpha/and-k-gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",417,"^13","^14","^S",417,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1495,"^R",7,"^S",1495,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1495,"^S",1495,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",123,"^R",8,"^S",123,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$f-n"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/fn-sym","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^4F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",123,"^13",["^6",["^14","^2H","^1X"]],"^S",123,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4F"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1442,"^R",7,"^S",1442,"^T",21,"^U",["^V",["^W",["^V",[["~$start","~$end","~$inst"]]]]],"^Y","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",21,"^[",["^V",[["^4I","^4J","^4K"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1442,"^13","^3;","^S",1442,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4I","^4J","^4K"]]]]],"^Y","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",47,"^R",20,"^S",47,"^T",32,"^1R",true],"^1R",true,"^=","~$cljs.spec.alpha/registry-ref","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",32,"^R",1,"^Q",47,"^S",47,"^1M","~$cljs.core/Atom"],"~$accept?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",979,"^R",8,"^S",979,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p__27361"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",979,"^13","^3;","^S",979,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4Q",["^4R"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",749,"^R",19,"^S",749,"^T",32,"^1E",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["^2N","^2W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",749,"^13","^2F","^S",749,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'and'"],"~$t_cljs$spec$alpha27138",["^ ","^31",19,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2B","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",5,"^Q",430,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$accept",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",977,"^R",8,"^S",977,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",977,"^13","^1T","^S",977,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",351,"^R",8,"^S",351,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$rmap","~$id","^1Z","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/recur-limit?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4[","^50","^1Z","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",351,"^13","^3;","^S",351,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^4[","^50","^1Z","~$k"]]]]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",45,"^R",4,"^S",45,"^T",13,"~:protocol","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/describe*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",45,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",423,"^R",19,"^S",423,"^T",32,"^1E",true,"^U",["^V",["^W",["^V",[[["^ ","^4Q",["~$req-un","~$opt-un","~$keys-pred","~$pred-exprs","~$opt-keys","~$req-specs","~$req","~$req-keys","~$opt-specs","~$pred-forms","~$opt","^1G"],"~:as","~$argm"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["~$p__27135"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",423,"^13","^2B","^S",423,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4Q",["^56","^57","^58","^59","^5:","^5;","^5<","^5=","^5>","^5?","^5@","^1G"],"^5A","^5B"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",66,"^R",8,"^S",66,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1R",true,"^=","~$cljs.spec.alpha/reg-resolve!","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",66,"^13",["^6",[null,"^14"]],"^S",66,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$re-explain",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1265,"^R",8,"^S",1265,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^1Z","^1[","^20","^3I","^21"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-explain","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^1Z","^1[","^20","^3I","^21"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1265,"^13",["^6",["^23","^14","^1X"]],"^S",1265,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^1Z","^1[","^20","^3I","^21"]]]]]],"~$alts",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1041,"^R",8,"^S",1041,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$&","^2M"]]]]],"^38",["^ ","^12",true,"^39",0,"^15",0,"^[",[["^V",["^2M"]]],"^U",["^V",[["~$&","^2M"]]],"^11",["^V",[null]]]],"^1R",true,"^=","~$cljs.spec.alpha/alts","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^38",["^ ","^12",true,"^39",0,"^15",0,"^[",[["^V",["^2M"]]],"^U",["^V",[["~$&","^2M"]]],"^11",["^V",[null]]],"^[",[["^V",["^2M"]]],"^10",null,"^39",0,"^11",["^V",[null]],"^R",1,"^12",true,"^28",[["^ ","^39",0,"^12",true,"^1M",["^6",["^14","^1T","^1X"]]]],"^Q",1041,"^13","^14","^S",1041,"^15",0,"^16",true,"^U",["^V",[["~$&","^2M"]]]],"~$with-name",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",85,"^R",8,"^S",85,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^X","~$name"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/with-name","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X","^5L"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",85,"^13",["^6",["^2P","^14","^2>","^2H","~$cljs.core/MetaFn","^1X"]],"^S",85,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^5L"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",270,"^R",7,"^S",270,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",270,"^13","^14","^S",270,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",93,"^R",8,"^S",93,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/spec-name","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",93,"^13",["^6",["^14","^2>","^2H","^1X"]],"^S",93,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^P","resources/public/js/development/cljs/spec/alpha.cljs","^Q",335,"^R",1,"^S",335,"^T",18,"~:declared",true,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",335,"^R",10,"^S",335,"^T",18,"^5U",true]],"~$t_cljs$spec$alpha27486",["^ ","^31",3,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2=","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",3,"^Q",1294,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",44,"^R",4,"^S",44,"^T",13,"^53","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1G"]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/with-gen*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","^1G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",44,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1G"]]]]],"^Y",null],"~$->t_cljs$spec$alpha27286",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^2N","^2W","^1G","^2X","~$cform","~$meta27287"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27286.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27286","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^2N","^2W","^1G","^2X","^5Z","^5["]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",780,"^13","^2F","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G","^2X","^5Z","^5["]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27286."],"~$t_cljs$spec$alpha27312",["^ ","^31",25,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2D","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",6,"^Q",881,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$k-gen",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",397,"^R",8,"^S",397,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1R",true,"^=","~$cljs.spec.alpha/k-gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",397,"^13",["^6",["^14","^1X"]],"^S",397,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",659,"^R",19,"^S",659,"^T",31,"^1E",true,"^U",["^V",["^W",["^V",[["^:","^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^:","^2N","^2W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",659,"^13","^2I","^S",659,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",159,"^R",8,"^S",159,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$s"],["~$s","^M"]]]]],"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]]],"^1R",true,"^=","~$cljs.spec.alpha/specize","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["~$s","^M"]]],"^10",null,"^39",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",1,"^12",false,"^1M",["^6",[null,"^14","^1X"]]],["^ ","^39",2,"^12",false,"^1M",["^6",[null,"^14","^1X"]]]],"^Q",159,"^S",159,"^15",2,"^16",true,"^U",["^V",[["~$s"],["~$s","^M"]]]],"~$->t_cljs$spec$alpha27205",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","~$mmvar","~$retag","^1G","^50","~$predx","~$dval","^2R","~$meta27206"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27205.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27205","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^M","^69","^6:","^1G","^50","^6;","^6<","^2R","^6="]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",556,"^13","^2?","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^M","^69","^6:","^1G","^50","^6;","^6<","^2R","^6="]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27205."],"~$->t_cljs$spec$alpha27300",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^2N","^2W","^1G","~$meta27301"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27300.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27300","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^2N","^2W","^1G","^6@"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",3,"^12",false,"^1?","^1@","^Q",816,"^13","^2J","^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2N","^2W","^1G","^6@"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27300."],"~$t_cljs$spec$alpha27219",["^ ","^31",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2<","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",6,"^Q",600,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",27,"^R",16,"^S",27,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",27,"^S",27,"^1M","^1N","^Y","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",39,"^R",14,"^S",39,"^T",18,"^25",true,"^26",["^V",["@interface"]],"^27",["^ ","^28",["^ ","~$conform*",[["^X","~$x"]],"~$unform*",[["^X","~$y"]],"~$explain*",[["^X","^1Z","^1[","^20","~$x"]],"~$gen*",[["^X","~$overrides","^1Z","^4["]],"^5W",[["^X","^1G"]],"^52",[["^X"]]]]],"^25",true,"^=","^1:","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^R",1,"^Q",39,"^27",["^ ","^28",["^ ","^6F",[["^X","~$x"]],"^6G",[["^X","~$y"]],"^6H",[["^X","^1Z","^1[","^20","~$x"]],"^6I",[["^X","^6J","^1Z","^4["]],"^5W",[["^X","^1G"]],"^52",[["^X"]]]],"^2:",null,"^S",39,"^1M","^14","^2;",["^6",["^2<","^2=","^2?","^2@","^2A","^2B","^2D","^1C","^2F","^1I","^2I","^2J"]],"^26",["^V",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",174,"^R",7,"^S",174,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",174,"^13","^14","^S",174,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",371,"^R",7,"^S",371,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"],["^X","~$x","^M"]]]]],"^Y","Helper function that returns true when x is valid for spec.","^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^10",null,"^39",3,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",2,"^12",false,"^1M","^3;"],["^ ","^39",3,"^12",false,"^1M","^3;"]],"^Q",371,"^S",371,"^15",3,"^16",true,"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^Y","Helper function that returns true when x is valid for spec."],"^F",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",293,"^R",7,"^S",293,"^T",10,"^U",["^V",["^W",["^V",[["^X"],["^X","^6J"]]]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["^X"],["^X","^6J"]]],"^U",["^V",[["^X"],["^X","^6J"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",10,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["^X"],["^X","^6J"]]],"^U",["^V",[["^X"],["^X","^6J"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X"],["^X","^6J"]]],"^10",null,"^39",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",1,"^12",false,"^1M","^14"],["^ ","^39",2,"^12",false,"^1M","^14"]],"^Q",293,"^S",293,"^15",2,"^16",true,"^U",["^V",[["^X"],["^X","^6J"]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1386,"^R",7,"^S",1386,"^T",20,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1386,"^13","^1C","^S",1386,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^6G",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",41,"^R",4,"^S",41,"^T",11,"^53","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/unform*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",11,"^[",["^V",[["^X","~$y"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",41,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]],"^Y",null],"~$->t_cljs$spec$alpha27486",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^3I","^1G","~$meta27487"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27486.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27486","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^3I","^1G","^6T"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",3,"^12",false,"^1?","^1@","^Q",1294,"^13","^2=","^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3I","^1G","^6T"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27486."],"~$->sym",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",323,"^R",8,"^S",323,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"^1R",true,"^=","~$cljs.spec.alpha/->sym","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",323,"^13",["^6",[null,"^14"]],"^S",323,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",187,"^R",7,"^S",187,"^T",13,"^U",["^V",["^W",["^V",[["^M"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",187,"^13",["^6",[null,"^14","^2H"]],"^S",187,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^M"]]]]]],"~$regex?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",80,"^R",7,"^S",80,"^T",13,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",80,"^13",["^6",[null,"^14"]],"^S",80,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^1R",true,"^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",16,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$s"],["~$min-count","~$s"]]],"^U",["^V",[["~$s"],["^71","~$s"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",406,"^S",406,"^U",["^V",["^W",["^V",[["~$s"],["^71","~$s"]]]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1R",true,"^=","~$cljs.spec.alpha/or-k-gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",16,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$s"],["^71","~$s"]]],"^U",["^V",[["~$s"],["^71","~$s"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["^71","~$s"]]],"^10",null,"^39",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",1,"^12",false,"^1M","^14"],["^ ","^39",2,"^12",false,"^1M","^14"]],"^Q",406,"^S",406,"^15",2,"^16",true,"^U",["^V",[["~$s"],["^71","~$s"]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1449,"^R",7,"^S",1449,"^T",20,"^U",["^V",["^W",["^V",[["^4I","^4J","~$val"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4I","^4J","^74"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1449,"^13",["^6",["^3;","^14"]],"^S",1449,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4I","^4J","^74"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$dt",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",358,"^R",8,"^S",358,"^T",10,"^1R",true,"^U",["^V",["^W",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]]]],"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]],"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]],"^11",["^V",[null,null]]]],"^1R",true,"^=","~$cljs.spec.alpha/dt","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",10,"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]],"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]],"^10",null,"^39",4,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",3,"^12",false,"^1M","^14"],["^ ","^39",4,"^12",false,"^1M",["^6",[null,"^14","^2>"]]]],"^Q",358,"^S",358,"^15",4,"^16",true,"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^3D"]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1074,"^R",8,"^S",1074,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/preturn","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1074,"^13",["^6",[null,"^14","^2>","^2U","^1X"]],"^S",1074,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1252,"^R",8,"^S",1252,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","~$xs","^5A","~$data"]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-conform","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["~$p","~$p__27467"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1252,"^13",["^6",[null,"^14","^2>","^2U","^1X"]],"^S",1252,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","^7;","^5A","^7<"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",74,"^R",7,"^S",74,"^T",12,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",74,"^13",["^6",[null,"^1X"]],"^S",74,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",318,"^R",7,"^S",318,"^T",15,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",318,"^13","^14","^S",318,"^15",0,"^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1010,"^R",19,"^S",1010,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1010,"^13",["^6",["^14","^1T","^1X"]],"^S",1010,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"~$deriv",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1123,"^R",8,"^S",1123,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/deriv","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1123,"^13",["^6",[null,"^14","^1T","^1X"]],"^S",1123,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$->t_cljs$spec$alpha27228",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^:","^2N","^2W","^1G","^50","~$kps","^2X","^5Z","~$meta27229"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27228.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27228","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^:","^2N","^2W","^1G","^50","^7H","^2X","^5Z","^7I"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",697,"^13","^2I","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2N","^2W","^1G","^50","^7H","^2X","^5Z","^7I"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27228."],"~$t_cljs$spec$alpha27205",["^ ","^31",9,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",6,"^Q",556,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",49,"^R",8,"^S",49,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$reg","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/deep-resolve","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^7M","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",49,"^S",49,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^7M","~$k"]]]]]],"~$->t_cljs$spec$alpha27138",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["~$keys->specnames","^5@","^56","^57","^1G","^59","^58","^5B","^5:","^5;","^5<","~$map__27136","^50","^5=","^5>","~$k->s","^5D","^5?","~$meta27139"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27138.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27138","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^7P","^5@","^56","^57","^1G","^59","^58","^5B","^5:","^5;","^5<","^7Q","^50","^5=","^5>","^7R","^5D","^5?","^7S"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",430,"^13","^2B","^15",19,"^16",true,"^U",["^V",["^W",["^V",[["^7P","^5@","^56","^57","^1G","^59","^58","^5B","^5:","^5;","^5<","^7Q","^50","^5=","^5>","^7R","^5D","^5?","^7S"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27138."],"~$exercise",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1433,"^R",7,"^S",1433,"^T",15,"^U",["^V",["^W",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^11",["^V",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^11",["^V",[null,null,null]]],"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^10",null,"^39",3,"^11",["^V",[null,null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",1,"^12",false,"^1M","^14"],["^ ","^39",2,"^12",false,"^1M","^14"],["^ ","^39",3,"^12",false,"^1M","~$cljs.core/LazySeq"]],"^Q",1433,"^S",1433,"^15",3,"^16",true,"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6J"]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",226,"^R",7,"^S",226,"^T",19,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",226,"^13",["^6",["^1T","^1X"]],"^S",226,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^U",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",594,"^S",594,"^U",["^V",["^W",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]]]],"^Y","Do not call this directly, use 'tuple'"],"^=","~$cljs.spec.alpha/tuple-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^38",["^ ","^12",false,"^39",3,"^15",3,"^[",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^U",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^10",null,"^39",3,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",2,"^12",false,"^1M","^14"],["^ ","^39",3,"^12",false,"^1M","^2<"]],"^Q",594,"^S",594,"^15",3,"^16",true,"^U",["^V",[["^2N","^2W"],["^2N","^2W","^1G"]]],"^Y","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^U",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",544,"^S",544,"^U",["^V",["^W",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]]]],"^Y","Do not call this directly, use 'multi-spec'"],"^=","~$cljs.spec.alpha/multi-spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^U",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^10",null,"^39",4,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",3,"^12",false,"^1M","^14"],["^ ","^39",4,"^12",false,"^1M","^2?"]],"^Q",544,"^S",544,"^15",4,"^16",true,"^U",["^V",[["^M","^69","^6:"],["^M","^69","^6:","^1G"]]],"^Y","Do not call this directly, use 'multi-spec'"],"~$conform",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",168,"^R",7,"^S",168,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",168,"^13","^14","^S",168,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^6I",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",43,"^R",4,"^S",43,"^T",8,"^53","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^6J","^1Z","^4["]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/gen*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",8,"^[",["^V",[["^X","^6J","^1Z","^4["]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",43,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6J","^1Z","^4["]]]]],"^Y",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1339,"^R",19,"^S",1339,"^T",29,"^1E",true,"^U",["^V",["^W",["^V",[["^3N","^3O","^3P","^3Q","^3R","^3S","^1G"]]]]],"^Y","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["^3N","^3O","^3P","^3Q","^3R","^3S","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1339,"^13","^2@","^S",1339,"^15",7,"^16",true,"^U",["^V",["^W",["^V",[["^3N","^3O","^3P","^3Q","^3R","^3S","^1G"]]]]],"^Y","Do not call this directly, use 'fspec'"],"~$t_cljs$spec$alpha27194",["^ ","^31",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2A","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",6,"^Q",520,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$->t_cljs$spec$alpha27521",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","^1F","^1G","^X","~$meta27522"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27521.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27521","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^M","^1F","^1G","^X","^89"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1411,"^13","^1I","^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^X","^89"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27521."],"~$inck",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",355,"^R",8,"^S",355,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/inck","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$m","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",355,"^13",["^6",["^2P","^14"]],"^S",355,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",31,"^R",16,"^S",31,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",31,"^S",31,"^1M","^1N","^Y","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",330,"^R",7,"^S",330,"^T",15,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",330,"^13",["^6",["^14","^1X"]],"^S",330,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",282,"^R",8,"^S",282,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["^X","^6J","^1Z","^4[","^M"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/gensub","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","^6J","^1Z","^4[","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",282,"^13","^14","^S",282,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6J","^1Z","^4[","^M"]]]]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",116,"^R",8,"^S",116,"^T",16,"^1R",true,"^U",["^V",["^W",["^V",[["~$spec-or-k"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1R",true,"^=","~$cljs.spec.alpha/the-spec","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",16,"^[",["^V",[["^8D"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",116,"^13",["^6",["^14","^1X"]],"^S",116,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8D"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",793,"^R",8,"^S",793,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$x","~$kfn","~$kform","~$distinct","~$count","^71","~$max-count","^1Z","^1[","^20"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/coll-prob","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^8G","^8H","^8I","^8J","^71","^8K","^1Z","^1[","^20"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",793,"^13",["^6",["^23","^14","^1X"]],"^S",793,"^15",10,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^8G","^8H","^8I","^8J","^71","^8K","^1Z","^1[","^20"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^M","^1F","~$opts"],["^M","^1F",["^ ","~$conform-into","~:into","~$describe-form","~:cljs.spec.alpha/describe","^4Q",["~$kind","~:cljs.spec.alpha/kind-form","^8J","^8K","^71","^8I","~$gen-max","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","~$conform-keys","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^U",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",843,"^S",843,"^U",["^V",["^W",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^=","~$cljs.spec.alpha/every-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^38",["^ ","^12",false,"^39",4,"^15",4,"^[",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^U",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^10",null,"^39",4,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",3,"^12",false,"^1M","^14"],["^ ","^39",4,"^12",false,"^1M","^2D"]],"^Q",843,"^S",843,"^15",4,"^16",true,"^U",["^V",[["^M","^1F","^8N"],["^M","^1F",["^ ","^8O","^8P","^8Q","^8R","^4Q",["^8S","^8T","^8J","^8K","^71","^8I","^8U","^8V","^8W","^8X","^8Y"],"^8Z",["^ ","^8U",20],"^5A","^8N"],"^1G"]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1060,"^R",8,"^S",1060,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept-nil?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1060,"^13",["^6",["^3;","^14","^1X"]],"^S",1060,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",105,"^R",8,"^S",105,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^8D"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1R",true,"^=","~$cljs.spec.alpha/maybe-spec","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^8D"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",105,"^13",["^6",[null,"^2P","^14","^2>","^2H","^5N","^1X"]],"^S",105,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8D"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",28,"^38",["^ ","^12",false,"^39",5,"^15",5,"^[",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^U",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",511,"^S",511,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]]]],"^Y","Do not call this directly, use 'spec'"],"^=","~$cljs.spec.alpha/spec-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",28,"^38",["^ ","^12",false,"^39",5,"^15",5,"^[",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^U",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^10",null,"^39",5,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",4,"^12",false,"^1M","^14"],["^ ","^39",5,"^12",false,"^1M",["^6",[null,"^2P","^14","^2A","^1X"]]]],"^Q",511,"^S",511,"^15",5,"^16",true,"^U",["^V",[["^M","^1F","^1G","^3D"],["^M","^1F","^1G","^3D","^3E"]]],"^Y","Do not call this directly, use 'spec'"],"~$invalid?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",163,"^R",7,"^S",163,"^T",15,"^U",["^V",["^W",["^V",[["^2S"]]]]],"^Y","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^2S"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",163,"^13","^3;","^S",163,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2S"]]]]],"^Y","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1015,"^R",19,"^S",1015,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^3I","~$re-form","^2W","^5?"]]]]],"^Y","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^3I","^99","^2W","^5?"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1015,"^13","^1T","^S",1015,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^3I","^99","^2W","^5?"]]]]],"^Y","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",982,"^R",8,"^S",982,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[[["~#cmap",[["^4>","~$&","~$pr","^5A","^2M"],"~:ps",["~$k1","~$&","~$kr","^5A","^2L"],"~:ks",["~$f1","~$&","~$fr","^5A","^2N"],"~:forms","^2S","~:ret","~$rep+","~:rep+"]]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/pcat*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p__27364"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",982,"^13",["^6",["^14","^1T","^1X"]],"^S",982,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^9<",[["^4>","~$&","^9=","^5A","^2M"],"^9>",["^9?","~$&","^9@","^5A","^2L"],"^9A",["^9B","~$&","^9C","^5A","^2N"],"^9D","^2S","^9E","^9F","^9G"]]]]]]]],"~$t_cljs$spec$alpha27518",["^ ","^31",2,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^1C","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",5,"^Q",1391,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1029,"^R",8,"^S",1029,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["^2M","^2L","^2N"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/alt*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^2M","^2L","^2N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1029,"^13",["^6",["^14","^1T","^1X"]],"^S",1029,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2M","^2L","^2N"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",994,"^R",19,"^S",994,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^2L","^2M","^2N"]]]]],"^Y","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2L","^2M","^2N"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",994,"^13",["^6",["^14","^1T","^1X"]],"^S",994,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2L","^2M","^2N"]]]]],"^Y","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",337,"^R",8,"^S",337,"^T",25,"^1R",true,"^U",["^V",["^W",["^V",[["~$v","~$args"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/macroexpand-check","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["~$v","^9P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",337,"^13","^1X","^S",337,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$v","^9P"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",55,"^R",8,"^S",55,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1R",true,"^=","~$cljs.spec.alpha/reg-resolve","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",55,"^13",["^6",[null,"^14","^1X"]],"^S",55,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",275,"^R",7,"^S",275,"^T",18,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",275,"^13","~$string","^S",275,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1474,"^R",3,"^S",1474,"^T",20,"^1K",true,"^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1K",true,"^Q",1467,"^S",1474,"^1M","^3;","^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",211,"^R",7,"^S",211,"^T",15,"^U",["^V",["^W",["^V",[["^X","~$gen-fn"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X","^9Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",211,"^13",["^6",["^2P","^14"]],"^S",211,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^9Z"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^6F",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",40,"^R",4,"^S",40,"^T",12,"^53","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/conform*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",40,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y",null],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1482,"^R",16,"^S",1482,"^T",30,"^1M","^3;","^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",30,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1482,"^13","^3;","^S",1482,"^15",0,"^1M","^3;","^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1052,"^R",8,"^S",1052,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["^4>","~$pret"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/noret?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^4>","^:4"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1052,"^13",["^6",["^3;","^14","^1X"]],"^S",1052,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4>","^:4"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1006,"^R",19,"^S",1006,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1006,"^13",["^6",["^2P","^14","^1X"]],"^S",1006,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"~$t_cljs$spec$alpha27228",["^ ","^31",9,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2I","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",5,"^Q",697,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$op-describe",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1143,"^R",8,"^S",1143,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-describe","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1143,"^13",["^6",[null,"^2P","^14","^1X"]],"^S",1143,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",206,"^R",7,"^S",206,"^T",15,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",206,"^13",["^6",[null,"^14","^2H"]],"^S",206,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",387,"^R",8,"^S",387,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1Z","^1[","^20","~$v"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/explain-1","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^M","^1F","^1Z","^1[","^20","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",387,"^13",["^6",["^23","^14"]],"^S",387,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1Z","^1[","^20","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",264,"^R",7,"^S",264,"^T",18,"^U",["^V",["^W",["^V",[["^1V"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^1V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",264,"^13","^14","^S",264,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1V"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1214,"^R",8,"^S",1214,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","^6J","^1Z","^4[","~$f"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-gen","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$p","^6J","^1Z","^4[","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1214,"^13",["^6",["^14","^1X"]],"^S",1214,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^6J","^1Z","^4[","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1020,"^R",8,"^S",1020,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^2M","^2L","^2N","~$f"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/filter-alt","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2M","^2L","^2N","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1020,"^13","^23","^S",1020,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2M","^2L","^2N","~$f"]]]]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",726,"^R",8,"^S",726,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$x","^2W","^2N"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/and-preds","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^2W","^2N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",726,"^13",["^6",[null,"^2>"]],"^S",726,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^2W","^2N"]]]]]],"~$t_cljs$spec$alpha27286",["^ ","^31",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2F","^P","resources/public/js/development/cljs/spec/alpha.cljs","^33",true,"^18",true,"^R",5,"^Q",780,"^34",false,"^1M","^35","^1>",["^6",["^1;","^1="]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1318,"^R",8,"^S",1318,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$f","^2X","^9P"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/call-valid?","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^2X","^9P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1318,"^13",["^6",["^3;","^1X"]],"^S",1318,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^2X","^9P"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1089,"^R",8,"^S",1089,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-unform","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1089,"^13",["^6",["^23","^14"]],"^S",1089,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",999,"^R",8,"^S",999,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["^4>","^4?","^2S","~$splice","^M"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/rep*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^4>","^4?","^2S","^:M","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",999,"^13",["^6",["^2P","^14","^1X"]],"^S",999,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^4>","^4?","^2S","^:M","^M"]]]]]],"^29",["^ ","^N",null,"^O",["^ ","^53","^1<","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^R",4,"^Q",132,"^S",132,"^U",["^V",["^W",["^V",[["~$_"],["~$_","^M"]]]]],"^Y",null],"^53","^1<","^=","~$cljs.spec.alpha/specize*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^38",["^ ","^12",false,"^39",2,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$_"],["~$_","^M"]]],"^10",null,"^39",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^28",[["^ ","^39",1,"^12",false,"^1M","^14"],["^ ","^39",2,"^12",false,"^1M","^14"]],"^Q",131,"^S",132,"^15",2,"^16",true,"^U",["^V",[["~$_"],["~$_","^M"]]],"^Y",null],"~$->t_cljs$spec$alpha27312",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","^8K","~$check?","^1G","^8U","^1F","~$map__27310","~$cpred","^8X","~$kind-form","~$addcv","~$cfns","^8Q","^8I","~$p__27309","^X","^8G","~$gen-into","^8J","^71","^8N","^8S","~$conform-all","^8O","~$meta27313"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27312.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha27312","^P","resources/public/js/development/cljs/spec/alpha.cljs","^[",["^V",[["^M","^8K","^:Q","^1G","^8U","^1F","^:R","^:S","^8X","^:T","^:U","^:V","^8Q","^8I","^:W","^X","^8G","^:X","^8J","^71","^8N","^8S","^:Y","^8O","^:Z"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",881,"^13","^2D","^15",25,"^16",true,"^U",["^V",["^W",["^V",[["^M","^8K","^:Q","^1G","^8U","^1F","^:R","^:S","^8X","^:T","^:U","^:V","^8Q","^8I","^:W","^X","^8G","^:X","^8J","^71","^8N","^8S","^:Y","^8O","^:Z"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha27312."],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1048,"^R",19,"^S",1048,"^T",29,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["~$p","^M"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1048,"^13",["^6",["^2P","^14"]],"^S",1048,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",992,"^R",8,"^S",992,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$&","^2M"]]]]],"^38",["^ ","^12",true,"^39",0,"^15",0,"^[",[["^V",["^2M"]]],"^U",["^V",[["~$&","^2M"]]],"^11",["^V",[null]]]],"^1R",true,"^=","~$cljs.spec.alpha/pcat","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^38",["^ ","^12",true,"^39",0,"^15",0,"^[",[["^V",["^2M"]]],"^U",["^V",[["~$&","^2M"]]],"^11",["^V",[null]]],"^[",[["^V",["^2M"]]],"^10",null,"^39",0,"^11",["^V",[null]],"^R",1,"^12",true,"^28",[["^ ","^39",0,"^12",true,"^1M",["^6",["^14","^1T","^1X"]]]],"^Q",992,"^13","^14","^S",992,"^15",0,"^16",true,"^U",["^V",[["~$&","^2M"]]]],"^6H",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",42,"^R",4,"^S",42,"^T",12,"^53","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1Z","^1[","^20","~$x"]]]]]],"^53","^1:","^=","~$cljs.spec.alpha/explain*","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","^1Z","^1[","^20","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",42,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1Z","^1[","^20","~$x"]]]]],"^Y",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^P","/Users/louiseklodt/dev/clojure/practice/quil/spaceinvaders/resources/public/js/development/cljs/spec/alpha.cljs","^Q",1329,"^R",8,"^S",1329,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$f","^2X","~$iters"]]]]],"^Y","returns f if valid, else smallest"],"^1R",true,"^=","~$cljs.spec.alpha/validate-fn","^P","resources/public/js/development/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^2X","^;6"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1329,"^13",["^6",[null,"^14","^1X"]],"^S",1329,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^2X","^;6"]]]]],"^Y","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^V",["~$cljs.spec.alpha/conformer",["^V",["~$fn*",["~$p1__27512#"],["^V",["~$cljs.core/zipmap",["^V",["~$cljs.core/map","~:cljs.spec.alpha/k","^;<"]],["^V",["^;>","~:cljs.spec.alpha/v","^;<"]]]]]],["^V",["^;;",["~$p1__27513#"],["^V",["^;>",["^V",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;?","~$k","^;@","~$v"]]],"^;A"]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^M","^2R","^8K","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^3T","^3E","^6@","~$cljs.spec.alpha/+","~:p2","^9E","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","~:pred-exprs","^;A","^3F","^8P","~:keys-pred","~:gen-max","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^6;","^9G","~$cljs.core/=","~:opt-keys","^3O","^7P","~:cljs.spec.alpha/rep","~:pred","^6<","~:splice","^:Q","^2N","^5@","~:cljs.spec.alpha/accept","^3N","~:else","^9A","~$cljs.core/count","~$cljs.spec.alpha/and","^56","^57","~$cljs.spec.alpha/cat","~:_","^8T","~:maybe","~:via","~$cljs.spec.alpha/every","^2Z","^:Z","^7I","~:req-specs","~$cljs.spec.alpha/or","^1G","~:cljs.spec.alpha/gfn","^8U","^3R","~$v","~:cljs.spec.alpha/spec","^59","~:conform-keys","^58","^3D","~$cljs.spec.alpha/fspec","^5B","~$fn","~:amp","^45","^3S","^4R","~$cljs.spec.alpha/nilable","^5:","^;@","~$cljs.spec.alpha/tuple","^1F","^:R","~$cljs.core/map?","^8W","~:p1","^;=","^5[","~:cljs.spec.alpha/problems","^:S","~$%","^;>","^;9","~$method","~:distinct","^5;","^8","~$cljs.spec.alpha/keys","^3I","^8X","^7H","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^2W","^;<","^:T","~:req","^:U","^:V","~$nil?","~:assertion-failed","^;;","~$cljs.core/<=","^6Q","~:cljs.spec.alpha/amp","~:id","^6=","^8Q","~:min-count","~:kind","~:smallest","~$cljs.core/set?","~:count","^2Y","~$cljs.core/nil?","^69","~:req-keys","^6:","~$k","^;?","^;B","~$cljs.core/list?","^8I","^6T","^3P","~:opt-specs","^:W","^89","~:cljs.spec.alpha/args","^3Q","~$ifn?","~:pred-forms","^5<","^7S","^X","^:","~$distinct?","~:max-count","^8G","^8V","~:max-elements","^:X","^7Q","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^50","~:num-elements","^2X","^8J","^5=","~$apply","^71","^8N","^8S","^5Z","~:min-elements","^5>","^:Y","^8Y","~:cljs.spec.alpha/alt","~$cljs.core/or","^9D","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^9>","^7R","^;:","~:in","^5D","^8R","^8O","~:accept","~$cljs.spec.alpha/&","~:opt","^1A","~:cljs.spec.alpha/pcat","^5?","~$cljs.spec.alpha/?"]],"~:order",["^4R","^;T","^;O","^<O","^<C","~~:_","^=G","^;Z","^=C","^;B","^=?","^<[","^;P","^3I","^6T","^;Y","^<X","^;X","^=<","^=4","^<B","^3N","^3O","^3P","^3Q","^3R","^3S","^3T","^;9","^;:","^;;","^;<","^;=","^;>","^;?","^;@","^;A","~$k","~$v","^6Q","^1A","^=@","^<Q","^<E","^89","^;G","^<R"]],"^Y",null]